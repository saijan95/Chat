import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;

public class ChatServerProcesses {
	private PrintWriter out;
	private BufferedReader in;
	private HashMap<String, String[]> nodesInformation;
	
	public ChatServerProcesses() {
		in = null;
		out = null;
		nodesInformation = new HashMap<String, String[]>();
	}
	
	protected ArrayList login(String username, String password, String ip, String port) {
		ArrayList userInformation = null;
		
		if(isValidAccount(username, password)) {
			userInformation = new ArrayList();
			userInformation.add(getName(username));
			userInformation.add(getContacts(username));
			setOnline(username, new String[]{ip,port});
		}
		
		return userInformation;
	}
	
	private boolean isValidAccount(String username, String password) {
		/** Checks if an account with the given username and password exists in the database. **/
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") + 
					"\\Account Details\\Logins\\logins.txt"));
			String line;
			while((line = in.readLine()) != null) {
				String[] lineContent = line.trim().split(",");
				if((lineContent[0].equals(username)) && (lineContent[1].equals(password))) {
					in.close();
					return true;
				}
			}
			
			in.close();
			return false;
			
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find login file");
			return false;
		} catch (IOException e) {
			System.out.println("Cannot read from login file");
			return false;
		}
	}
	
	private String getName(String username) {
		String name = null;
		
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") +
					"\\Account Details\\Users\\names.txt"));
			String line;
			while((line = in.readLine()) != null) {
				String[] lineContent = line.trim().split(",");
				
				if(lineContent[0].equals(username))
					name = lineContent[1];
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find names file.");
		} catch (IOException e) {
			System.out.println("Cannot read from names file.");
		}
		
		try {
			in.close();
		} catch (IOException e) {
			System.out.println("Cannot close reader stream.");
		}
		return name;
	}
	
	protected ArrayList<String[]> getContacts(String username) {
		ArrayList<String[]> contacts = null;
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") + 
					"\\Account Details\\Contacts\\" + username + ".txt"));
			
			contacts = new ArrayList<String[]>();
			String line;
			while((line = in.readLine()) != null) {
				String[] contactInformation = line.trim().split(",");
				String relationship = contactInformation[1];
				
				if ((relationship.equals("FRIEND")) || relationship.equals("PENDING1") || relationship.equals("PENDING2")) {
					String contactUsername = contactInformation[0];
					String contactName = getName(contactUsername);
					String[] contact = new String[3];
					
					contact[0] = contactUsername;
					contact[1] = contactName;
					
					if (relationship.equals("PENDING1"))
						contact[2] = "OFFLINE";
					else if (relationship.equals("PENDING2"))
						contact[2] = "PENDING";
					else {
						if(isOnline(contactUsername))
							contact[2] = "ONLINE";
						else
							contact[2] = "OFFLINE";
					}
					
					contacts.add(contact);
				}
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find contacts file.");
		} catch (IOException e) {
			System.out.println("Cannot read from contacts file.");
		}
		
		try {
			in.close();
		} catch (IOException e) {
			System.out.println("Cannot close reader stream.");
		}
		return contacts;         // return format: <{contact's username, contact's name, contact's status}>
	}
	
	protected boolean createAccount(String newUsername, String newPassword, String name) {
		if (getName(newUsername) == null) {
			addLoginCredentials(newUsername, newPassword);
			addToUsersList(newUsername, name);
			createContactsList(newUsername);
			return true;                             // if true then an account has been created successfully.
		}
		
		return false;								 // if false then an account with the given username already exists.
	}
	
	private void addLoginCredentials(String newUsername, String newPassword) {
		try {
			out = new PrintWriter(new FileWriter((System.getProperty("user.dir") + 
					"\\Account Details\\Logins\\logins.txt"), true));
			
			out.println(newUsername + "," + newPassword);
			out.close();
			
		} catch (IOException e) {
			System.out.println("Cannot wirte to login file");
			return;
		}
	}
	
	private void addToUsersList(String username, String name) {
		try {
			out = new PrintWriter(new FileWriter((System.getProperty("user.dir") + 
					"\\Account Details\\Users\\names.txt"), true));
			out.println(username + "," + name);
			out.close();
		} catch (IOException e) {
			System.out.println("Cannot wirte to login file");
		}
	}
	
	private void createContactsList(String username) {
		try {
			out = new PrintWriter(new FileWriter((System.getProperty("user.dir") + 
					"\\Account Details\\Contacts\\" + username + ".txt"), true));
			out.close();
			
		} catch (IOException e) {
			System.out.println("Cannot create contacts file.");
		}
	}
	
	protected void addContact(String username, String contactUsername) {
		if ((!isAlreadyFriend(username, contactUsername) || isBlocked(username, contactUsername))
					&& (getName(contactUsername) != null)) {
			try {
				out = new PrintWriter(new FileWriter((System.getProperty("user.dir") + 
						"\\Account Details\\Contacts\\" + username + ".txt"), true));
				out.println(contactUsername + "," + "PENDING1");
				out.close();
				
				out = new PrintWriter(new FileWriter((System.getProperty("user.dir") + 
						"\\Account Details\\Contacts\\" + contactUsername + ".txt"), true));
				out.println(username + "," + "PENDING2");
				out.close();
				
			} catch (IOException e) {
				System.out.println("Cannot wirte to contacts file");
			}
		}
	}
	
	private boolean isAlreadyFriend(String username, String contactUsername) {
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") +
					"\\Account Details\\Contacts\\" + username + ".txt"));
			String line;
			while ((line = in.readLine()) != null) {
				String contact = line.trim().split(",")[0];
				
				if (contact.equals(contactUsername)) {
					String relationship = line.trim().split(",")[1];
					
					if(relationship.equals("FRIEND")) {
						in.close();
						return true;
					}
				}
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find contacts file.");
		} catch (IOException e) {
			System.out.println("Cannot read from contacts file.");
		}
		
		try {
			in.close();
		} catch (IOException e) {
			System.out.println("Cannnot close input stream.");
		}
		return false;
	}
	
	private boolean isBlocked(String username, String contactUsername) {
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") +
					"\\Account Details\\Contacts\\" + username + ".txt"));
			while (in.readLine() != null) {
				String line = in.readLine();
				String contact = line.trim().split(",")[0];
				
				if (contact.equals(contactUsername)) {
					String relationship = line.trim().split(",")[1];
					
					if(relationship.equals("BLOCKED")) {
						in.close();
						return true;
					}
				}
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find contacts file.");
		} catch (IOException e) {
			System.out.println("Cannot read from contacts file.");
		}
		
		try {
			in.close();
		} catch (IOException e) {
			System.out.println("Cannot close input stream.");
		}
		return false;
	}
	
	protected void answerFriendRequest(String username, String contactUsername, String answer) {
		ArrayList<String> contactsCopy = new ArrayList<String>();
		
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") +
				"\\Account Details\\Contacts\\" + username + ".txt"));
			
			String line;
			while((line = in.readLine()) != null) {
				contactsCopy.add(line);
			}
			
			for(int i = 0; i < contactsCopy.size(); i++) {
				String[] lineCopy = contactsCopy.get(i).split(" ");
				if (lineCopy[0].equals(contactUsername)) {
					lineCopy[1] = answer;
					contactsCopy.add(i, lineCopy[0] + "," + lineCopy[1]);
					break;
				}
			}
			in.close();
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find contacts file.");
		} catch (IOException e) {
			System.out.println("Cannot read contacts file.");
		}
		
		try {
			out = new PrintWriter(new FileWriter(System.getProperty("user.dir") +
					"\\Account Details\\Contacts\\" + username + ".txt"));
			
			for(int i = 0; i < contactsCopy.size(); i++) {
				out.println(contactsCopy.get(i));
			}
			
		} catch (IOException e) {
			System.out.println("Cannot wirte to contacts file");
		}
		
		if(isOnline(username)) {
			ChatClient chatClient = new ChatClient(nodesInformation.get(username)[0], 
					Integer.parseInt(nodesInformation.get(username)[0]));
			chatClient.connectToServer();
			
			String contactStatus;
			if(isOnline(contactUsername))
				contactStatus = "ONLINE";
			else
				contactStatus = "OFFLINE";
			
			chatClient.addNewContactToUser(contactUsername, getName(contactUsername), contactStatus);
		}
	}
	
	protected String[] connect(String username) {
		if(isOnline(username))
			return nodesInformation.get(username);
		
		return null;
	}
	
	private void setOnline(String username, String[] nodeInformation) { 
		nodesInformation.put(username, nodeInformation); 
	}
	
	protected void updateStatus(String username, String status) {
		try {
			in = new BufferedReader(new FileReader(System.getProperty("user.dir") + 
					"\\Account Details\\Contacts\\" + username + ".txt"));
			
			
			String line;
			while((line = in.readLine()) != null) {
				String contactUsername = line.split(",")[0];
				
				if(isOnline(contactUsername) && line.split(",")[1].equals("FRIEND")) {
					String[] nodeInformation = nodesInformation.get(contactUsername);
					ChatClient chatClient = new ChatClient(nodeInformation[0], 
							Integer.parseInt(nodeInformation[1]));
					chatClient.connectToServer();
					chatClient.updateContactStatus(username, status);
				}
			}
			
		} catch (FileNotFoundException e) {
			System.out.println("Cannot find contacts file.");
		} catch (IOException e) {
			System.out.println("Cannot read from contacts file.");
		}
	}
	protected void setOffline(String username) { nodesInformation.remove(username); }
	protected boolean isOnline(String username) { return nodesInformation.containsKey(username); }
	
}